function coolings = setcoolings(type, boundaries, power, w_0, det, xy_rel, cross)
arguments
    type            (1,1)  {mustBeMember(type, ["eqcross_uni" "eqcross", "push", "retro", "triorth"])}
    boundaries
    power
    w_0
    det
    xy_rel          (1,2)   = [0 0]
    cross.refl      (1,1)   = 1
    cross.z_rel     (1,:)
end
    hl = boundaries.hl;
    hw = boundaries.hw;
    coolings = FieldSettings;
    coolings.type = "coolings";
    coolings.info = struct( ...
                "type"    ,         type    , ...
                "power"   ,         power   , ...
                "w_0"     ,         w_0     , ...
                "detuning",         det     , ...
                "xy_rel"  ,         xy_rel  );
    switch type
        % gaussian
        case "eqcross"   
            coolings.info.z_rel = cross.z_rel;
            coolings.info.refl  = cross.refl;
            power0 = power * (cross.refl)^(1/8);
            power1 = power * (cross.refl)^(3/8);
            power2 = power * (cross.refl)^(5/8);
            power3 = power * (cross.refl)^(7/8);
            beambuilder = @(z, acc) [ acc, ...
                BeamUnit("gaussian", power0, w_0, det, [2*hw*xy_rel 2*hl*z], [+1  0 0], "+"), ...
                BeamUnit("gaussian", power1, w_0, det, [2*hw*xy_rel 2*hl*z], [ 0 +1 0], "-"), ...
                BeamUnit("gaussian", power3, w_0, det, [2*hw*xy_rel 2*hl*z], [-1  0 0], "+"), ...
                BeamUnit("gaussian", power2, w_0, det, [2*hw*xy_rel 2*hl*z], [ 0 -1 0], "-")  ];
            coolings.units = fold_a(beambuilder, [], cross.z_rel);
        % circular disk
        case "eqcross_uni"
            coolings.info.z_rel = cross.z_rel;
            coolings.info.refl  = cross.refl;
            power0 = power * (cross.refl)^(1/8);
            power1 = power * (cross.refl)^(3/8);
            power2 = power * (cross.refl)^(5/8);
            power3 = power * (cross.refl)^(7/8);
            beambuilder = @(z, acc) [ acc, ...
                BeamUnit("circuni", power0, w_0, det, [2*hw*xy_rel 2*hl*z], [+1  0 0], "+"), ...
                BeamUnit("circuni", power1, w_0, det, [2*hw*xy_rel 2*hl*z], [ 0 +1 0], "-"), ...
                BeamUnit("circuni", power3, w_0, det, [2*hw*xy_rel 2*hl*z], [-1  0 0], "+"), ...
                BeamUnit("circuni", power2, w_0, det, [2*hw*xy_rel 2*hl*z], [ 0 -1 0], "-")  ];
            coolings.units = fold_a(beambuilder, [], cross.z_rel);
        case "push"            
            coolings.units = [...
                BeamUnit("gaussian", power, w_0, det, [2*hw*xy_rel 0], [0 0 +1], "+"), ...
                BeamUnit("gaussian", power, w_0, det, [2*hw*xy_rel 0], [0 0 +1], "-") ];
        case "retro"     
            coolings.units = [...
                BeamUnit("gaussian", power, w_0, det, [2*hw*xy_rel 0], [0 0 -1], "-"), ...
                BeamUnit("gaussian", power, w_0, det, [2*hw*xy_rel 0], [0 0 -1], "+") ]; 
        case "triorth"
            coolings.units = [ ...
                BeamUnit("gaussian", power, w_0, det, [0 0 0], [+1 0 0], "-"), ...
                BeamUnit("gaussian", power, w_0, det, [0 0 0], [-1 0 0], "-"), ...
                BeamUnit("gaussian", power, w_0, det, [0 0 0], [0 +1 0], "-"), ...
                BeamUnit("gaussian", power, w_0, det, [0 0 0], [0 -1 0], "-"), ...
                BeamUnit("gaussian", power, w_0, det, [0 0 0], [0 0 +1], "+"), ...
                BeamUnit("gaussian", power, w_0, det, [0 0 0], [0 0 -1], "+"), ...
            ];
    end
end